<?xml version="1.0" encoding="UTF-8"?>
<root xmlns:nsd="https://structorizer.fisch.lu" version="3.30-10" preRepeat="until " postFor="to" preReturn="return" postForIn="in" preWhile="while " output="OUTPUT" input="INPUT" preFor="for" preExit="exit" preLeave="leave" ignoreCase="true" preThrow="throw" preForIn="foreach" stepFor="by" author="pj56alj" created="2024-09-18" changedby="pj56alj" changed="2024-09-23" origin="Structorizer 3.30-10" text="&#34;APP_TASKS&#34;" comment="" color="ffffff" type="program" style="nice">
	<children>
		<instruction text="&#34;Création des variables :&#34;,&#34;uint8_t (Axes1a, Axes1b, Axes2a, Axes2b)&#34;,&#34;uint8_t (Start, debut_L, debut_R, End)&#34;,&#34;uint16_t (Axes1, Target_Axes1, Axes2, Target_Axes2)&#34;,&#34;uint8_t (flag_calibration)&#34;,&#34;uint8_t (New_PID_Moteur)&#34;,&#34;uint16_t (EnvoieOCL, EnvoieOCL)&#34;,&#34;int16_t (EnvoieMoteur1, EnvoieMoteur2)&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
		<case text="&#34;(AppData.state)&#34;,&#34;APP_STATE_INIT&#34;,&#34;APP_STATE_SERVICE_WAIT&#34;,&#34;APP_STATE_SERVICE_TASKS&#34;,&#34;default&#34;" comment="" color="ffffff" disabled="0">
			<qCase>
				<call text="&#34;appel de la fonction BSP_InitADC10()&#34;" comment="" color="ffffff" disabled="0"></call>
				<call text="&#34;appel de la fonction InitFifo(&amp;descrFifoRx, 16, fifoRX, 0)&#34;" comment="" color="ffffff" disabled="0"></call>
				<instruction text="&#34;Initialisation de mes variables&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
				<call text="&#34;appel de la fonction DRV_TMR0_Start()&#34;" comment="" color="ffffff" disabled="0"></call>
				<call text="&#34;appel de la fonction DRV_TMR1_Start()&#34;" comment="" color="ffffff" disabled="0"></call>
				<call text="&#34;appel de la fonction DRV_OC0_Start()&#34;" comment="" color="ffffff" disabled="0"></call>
				<call text="&#34;appel de la fonction DRV_OC1_Start()&#34;" comment="" color="ffffff" disabled="0"></call>
				<call text="&#34;appel de la fonction APP_UpdateState(APP_STATE_SERVICE_WAIT)&#34;" comment="" color="ffffff" disabled="0"></call>
				<instruction text="&#34;break&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
			</qCase>
			<qCase>
				<instruction text="&#34;break&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
			</qCase>
			<qCase>
				<instruction text="&#34;ma structure ValAdc va prendre les valeurs des ADC's&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
				<call text="&#34;Appel de la fonction FeedbackPot()&#34;" comment="" color="ffffff" disabled="0"></call>
				<while text="&#34;while (si mon moteur ne sais pas calibré )&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
					<qWhile>
						<instruction text="&#34;enclechement du moteur suivant la position où il est afin de revenir en position initiale&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
					</qWhile>
				</while>
				<alternative text="&#34;(Si les moteurs sont calibrées)&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
					<qTrue>
						<instruction text="&#34;Mise à 2 la variable de calibration&#34;,&#34;Désactivation des OCs&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
					</qTrue>
					<qFalse color="ffffff">
					</qFalse>
				</alternative>
				<instruction text="&#34;Récupération de la taille du Fifo pour voir si toute la trame est reçu&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
				<alternative text="&#34;(Si cette valeur récuperé est plus grande ou égale à 7)&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
					<qTrue>
						<instruction text="&#34;Récupération de la trame et envoie de chaqu'un des bytes dans une variable respective&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
					</qTrue>
					<qFalse color="ffffff">
					</qFalse>
				</alternative>
				<alternative text="&#34;(Si la variable Start contient le caractère 'X')&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
					<qTrue>
						<alternative text="&#34;(Si la variable debut_L contient le caractère 'L')&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
							<qTrue>
								<alternative text="&#34;(Si la variable debut_R contient le caractère 'R')&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
									<qTrue>
										<alternative text="&#34;(Si la variable End contient le caractère 'C')&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
											<qTrue>
												<instruction text="&#34;Sa veut dire que la trame lue est correcte du coup,&#34;,&#34;Activation du flag Set_Config&#34;,&#34;Désactivation du flag Error&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
											</qTrue>
											<qFalse color="ffffff">
											</qFalse>
										</alternative>
									</qTrue>
									<qFalse color="ffffff">
									</qFalse>
								</alternative>
							</qTrue>
							<qFalse color="ffffff">
							</qFalse>
						</alternative>
					</qTrue>
					<qFalse color="ffffff">
					</qFalse>
				</alternative>
				<alternative text="&#34;(Sinon, sa veut dire que la trame est incorrect)&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
					<qTrue>
						<instruction text="&#34;Désactivation du flag Set_Config&#34;,&#34;Activation du flag Error&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
					</qTrue>
					<qFalse color="ffffff">
					</qFalse>
				</alternative>
				<alternative text="&#34;(Si mon flag erreur est désactivé)&#34;" comment="" color="ffffff" disabled="0">
					<qTrue>
						<instruction text="&#34;Inversion de l'état de la led LED_DE_Vie&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
						<alternative text="&#34;(Si tout mes Axes sont égaux à 255 et que le flag Set_Config est activé)&#34;" comment="" color="ffffff" disabled="0">
							<qTrue>
								<instruction text="&#34;désactivation du flag Set_Config&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
								<instruction text="&#34;mise à 512 la valeur de Target_Axes1 et Target_Axes2&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
								<instruction text="&#34;activation de mon flag New_PID_Moteur&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
							</qTrue>
							<qFalse color="ffffff">
							</qFalse>
						</alternative>
						<alternative text="&#34;(Sinon, si le flag Set_Config est activé)&#34;" comment="" color="ffffff" disabled="0">
							<qTrue>
								<instruction text="&#34;calcul de mes Axes 1 et 2 avec leurs bytes respectives&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
								<call text="&#34;Utilisation de ma fonction ReMapping() afin d'avoir les axes dans les valeurs des potentiomètres&#34;" comment="" color="ffffff" disabled="0"></call>
								<instruction text="&#34;activation du flag New_PID_Moteur&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
								<instruction text="&#34;désactivation du flag Set_Config&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
							</qTrue>
							<qFalse color="ffffff">
							</qFalse>
						</alternative>
					</qTrue>
					<qFalse color="ffffff">
					</qFalse>
				</alternative>
				<alternative text="&#34;(Si le flag New_PID_Moteur est activé)&#34;" comment="" color="ffffff" disabled="0">
					<qTrue>
						<instruction text="&#34;désactivation du flag New_PID_Moteur&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
						<call text="&#34;utilisation de la fonction PIDupdateMoteurL() afin d'avoir la valeur mis sur la variable EnvoieMoteurL&#34;" comment="&#34;&#34;" color="ffffff" disabled="0"></call>
						<call text="&#34;utilisation de la fonction PIDupdateMoteurR() afin d'avoir la valeur mis sur la variable EnvoieMoteurR&#34;" comment="&#34;&#34;" color="ffffff" disabled="0"></call>
						<alternative text="&#34;(Si on retrouve un de nos moteurs en dehors du range possible des potentiomètres)&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
							<qTrue>
								<instruction text="&#34;mise à 1 de la variable calibration afin de recalibrer le moteur en question&#34;" comment="&#34;&#34;" color="ffffff" rotated="0" disabled="0"></instruction>
							</qTrue>
							<qFalse color="ffffff">
							</qFalse>
						</alternative>
						<alternative text="&#34;(Si la valeur de EnvoieMoteur est plus petit que 0)&#34;" comment="&#34;&#34;" color="ffffff" disabled="0">
							<qTrue>
								<call text="&#34;utilisation de ma fonction ReMapping() afin d'avoir les variables EnvoieMoteur en absolue dans les valeurs de mon OC&#34;" comment="&#34;&#34;" color="ffffff" disabled="0"></call>
								<instruction text="&#34;mise à 0 les pins A1 et A2 afin de choisir le sens de rotation du moteur&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
								<call text="&#34;appel de la fonction DRV_OC0_PulseWidthSet() et DRV_OC1_PulseWidthSet() avec la valeur mapper de EnvoieMoteur&#34;" comment="" color="ffffff" disabled="0"></call>
							</qTrue>
							<qFalse color="ffffff">
							</qFalse>
						</alternative>
						<alternative text="&#34;(Sinon, si la valeur de EnvoieMoteur est plus grand que 0)&#34;" comment="" color="ffffff" disabled="0">
							<qTrue>
								<call text="&#34;utilisation de ma fonction ReMapping() afin d'avoir la variable EnvoieMoteur dans les valeurs de mon OC&#34;" comment="" color="ffffff" disabled="0"></call>
								<instruction text="&#34;mise à 1 les pins A1 et A2 afin de choisir le sens de rotation du moteur&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
								<call text="&#34;appel de la fonction DRV_OC0_PulseWidthSet() et DRV_OC1_PulseWidthSet() avec la valeur mapper de EnvoieMoteur&#34;" comment="" color="ffffff" disabled="0"></call>
							</qTrue>
							<qFalse color="ffffff">
							</qFalse>
						</alternative>
						<alternative text="&#34;(Sinon)&#34;" comment="" color="ffffff" disabled="0">
							<qTrue>
								<instruction text="&#34;mise à 0 les pins A1 et A2 afin de choisir le sens de rotation du moteur&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
								<call text="&#34;appel de la fonction DRV_OC0_PulseWidthSet() et DRV_OC1_PulseWidthSet() avec la valeur de 0 afin qu'ils bougent pas&#34;" comment="" color="ffffff" disabled="0"></call>
							</qTrue>
							<qFalse color="ffffff">
							</qFalse>
						</alternative>
					</qTrue>
					<qFalse color="ffffff">
					</qFalse>
				</alternative>
				<instruction text="&#34;Incrémentation de 1 la valeur de i&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
				<call text="&#34;appel de la fonction APP_UpdateState(APP_STATE_SERVICE_WAIT)&#34;" comment="" color="ffffff" disabled="0"></call>
				<instruction text="&#34;break&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
			</qCase>
			<qCase>
				<instruction text="&#34;break&#34;" comment="" color="ffffff" rotated="0" disabled="0"></instruction>
			</qCase>
		</case>
	</children>
</root>